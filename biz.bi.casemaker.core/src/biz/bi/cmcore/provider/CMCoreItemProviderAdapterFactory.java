/**
 * <copyright>
 * </copyright>
 *
 * $Id: CMCoreItemProviderAdapterFactory.java,v 1.3 2005/08/25 14:56:57 smoreno Exp $
 */
package biz.bi.cmcore.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import biz.bi.cmcore.model.util.CMCoreAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CMCoreItemProviderAdapterFactory extends CMCoreAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static final String copyright = "Business Innovations"; //$NON-NLS-1$

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CMCoreItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link biz.bi.cmcore.model.CMProxyTestObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMProxyTestObjectItemProvider cmProxyTestObjectItemProvider;

	/**
	 * This creates an adapter for a {@link biz.bi.cmcore.model.CMProxyTestObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCMProxyTestObjectAdapter() {
		if (cmProxyTestObjectItemProvider == null) {
			cmProxyTestObjectItemProvider = new CMProxyTestObjectItemProvider(
					this);
		}

		return cmProxyTestObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link biz.bi.cmcore.model.CMProxyElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMProxyElementItemProvider cmProxyElementItemProvider;

	/**
	 * This creates an adapter for a {@link biz.bi.cmcore.model.CMProxyElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCMProxyElementAdapter() {
		if (cmProxyElementItemProvider == null) {
			cmProxyElementItemProvider = new CMProxyElementItemProvider(this);
		}

		return cmProxyElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link biz.bi.cmcore.model.CMProxyEquivalenceClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMProxyEquivalenceClassItemProvider cmProxyEquivalenceClassItemProvider;

	/**
	 * This creates an adapter for a {@link biz.bi.cmcore.model.CMProxyEquivalenceClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCMProxyEquivalenceClassAdapter() {
		if (cmProxyEquivalenceClassItemProvider == null) {
			cmProxyEquivalenceClassItemProvider = new CMProxyEquivalenceClassItemProvider(
					this);
		}

		return cmProxyEquivalenceClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link biz.bi.cmcore.model.CMProxyEffect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMProxyEffectItemProvider cmProxyEffectItemProvider;

	/**
	 * This creates an adapter for a {@link biz.bi.cmcore.model.CMProxyEffect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCMProxyEffectAdapter() {
		if (cmProxyEffectItemProvider == null) {
			cmProxyEffectItemProvider = new CMProxyEffectItemProvider(this);
		}

		return cmProxyEffectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link biz.bi.cmcore.model.CMProxyDependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMProxyDependencyItemProvider cmProxyDependencyItemProvider;

	/**
	 * This creates an adapter for a {@link biz.bi.cmcore.model.CMProxyDependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCMProxyDependencyAdapter() {
		if (cmProxyDependencyItemProvider == null) {
			cmProxyDependencyItemProvider = new CMProxyDependencyItemProvider(
					this);
		}

		return cmProxyDependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link biz.bi.cmcore.model.CMProxyCombination} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CMProxyCombinationItemProvider cmProxyCombinationItemProvider;

	/**
	 * This creates an adapter for a {@link biz.bi.cmcore.model.CMProxyCombination}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createCMProxyCombinationAdapter() {
		if (cmProxyCombinationItemProvider == null) {
			cmProxyCombinationItemProvider = new CMProxyCombinationItemProvider(
					this);
		}

		return cmProxyCombinationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (cmProxyTestObjectItemProvider != null)
			cmProxyTestObjectItemProvider.dispose();
		if (cmProxyElementItemProvider != null)
			cmProxyElementItemProvider.dispose();
		if (cmProxyEquivalenceClassItemProvider != null)
			cmProxyEquivalenceClassItemProvider.dispose();
		if (cmProxyEffectItemProvider != null)
			cmProxyEffectItemProvider.dispose();
		if (cmProxyDependencyItemProvider != null)
			cmProxyDependencyItemProvider.dispose();
		if (cmProxyCombinationItemProvider != null)
			cmProxyCombinationItemProvider.dispose();
	}

}
